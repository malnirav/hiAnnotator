% Generated by roxygen2 (4.0.0): do not edit by hand
\name{makeGRanges}
\alias{makeGRanges}
\title{Make a sorted GRanges object from a dataframe.}
\usage{
makeGRanges(x, freeze = NULL, positionsOnly = FALSE, soloStart = FALSE,
  chromCol = NULL, strandCol = NULL, startCol = NULL, stopCol = NULL,
  keepFactors = FALSE)
}
\arguments{
\item{x}{dataframe to be converted into a GRanges object}

\item{freeze}{UCSC genome version of the data in x. Default is NULL.
This parameter is generally used to populate seqinfo
slot of GRanges objects.}

\item{positionsOnly}{boolean flag indicating to return only position based
data or everything from the dataframe. Defaults to FALSE.}

\item{soloStart}{flag denoting whether only one position based column
is available. In other words, only starts are present and no stops.
Default=FALSE.}

\item{chromCol}{use the defined column name for seqname/chromosome based
data from the dataframe. Defaults to NULL.}

\item{strandCol}{use the defined column name for strand or orientation from
the dataframe. Defaults to NULL.}

\item{startCol}{use the defined column name for start coordinate from
the dataframe. Defaults to NULL.}

\item{stopCol}{use the defined column name for stop coordinate from
the dataframe. Defaults to NULL and not required if soloStart=TRUE.}

\item{keepFactors}{keep vectors/columns stored as factors? Defaults to FALSE}
}
\value{
a GRanges object converted from x.
}
\description{
The function converts a dataframe into a GRanges object without too much
hassle of renaming column names. The function finds column names that sound
like seqname, chromosome, start, stop, position, etc and puts them in
respective slots to facilitate the conversion of a dataframe to a GRanges
object. If more than one column that sounds like start, stop, or position
is present, the function will use the first match as the representative.
It is recommended to run this function before utilizing any other annotation functions since it will sort the object by chromosome and position for copying annotations back to their respective rows confidently.
}
\examples{
# Convert a dataframe to GRanges object
data(genes)

makeGRanges(genes, soloStart=TRUE)
makeGRanges(genes)
#makeGRanges(genes, freeze="hg18", soloStart=TRUE)
#makeGRanges(genes, freeze="hg18")
}
\seealso{
\code{\link{getNearestFeature}}, \code{\link{getFeatureCounts}},
\code{\link{getSitesInFeature}}.
}

